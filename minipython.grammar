/*
	Αλέξιος Μανδελιάς 3190106
	Δημήτριος Τσίρμπας 3190205
	Αναστάσιος Πασχαλίδης 3190166
*/

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']|'_'|'$';
	cr = 13;
	lf = 10;
	all = [0..127];
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]];
	str_literal = [not_eol - '"'];
	str_literal_s = [not_eol - 39];

Tokens
	tab = 9;

	/* Comparison Operators */
	great_eq = '>=';
	less_eq = '<=';
	not_eq = '!=';
	eq = '==';
	sub_assign = '-=';
	div_assign = '/=';
	less_than = '<';
	greater_than = '>';

	/* Mathematical Operators */
	op_add = '+';
	op_sub = '-';
	op_exp = '**';
	op_mul = '*';
	op_div = '/';
	op_mod = '%';
	assign = '=';

	/* Other Symbols */
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma =',';
	dot = '.';
	colon = ':';
	double_quote = '"';
	single_quote = 39;

	/* Keywords */
	true = 'true';
	false = 'false';
	def = 'def';
	if = 'if';
	for = 'for';
	in = 'in';
	while = 'while';
	print = 'print';
	return = 'return';
	assert = 'assert';
	length = 'len';
	max = 'max';
	min = 'min';
	import = 'import';
	as = 'as';
	from = 'from';
	logical_and = 'and';
	logical_or = 'or';
	logical_not = 'not';
	none = 'None';

	/* Other Tokens */
	eoltoken = eol;
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol;
	num = digit+ | (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string_double_quotes = 34 str_literal* 34;
	string_single_quotes = 39 str_literal_s* 39;

Ignored Tokens
	blank, line_comment;

Productions
	/* Goal */
	goal = {commands} command more_commands*;
	command = {function} function | {statement} statement;
	more_commands = {more_commands} eoltoken command;

	/* Function + Argument */
	function = {func_def} def identifier l_par argument? r_par colon statement;
	argument = {argument} identifier default_value? argument_list*;
	default_value = {default_value} assign value;
	argument_list = {argument_list} comma identifier default_value?;

	/* Statement */
	statement = {if} tab* if comparison colon statement
		| {while} tab* while comparison colon statement
		| {for} tab* for [id1]:identifier in [id2]:identifier colon statement
		| {return} tab* return expression
		| {print} tab* print expression expression_list*
		| {assign_var} tab* identifier operate_assign expression
		| {assign_array} tab* identifier l_br [ex1]:expression r_br assign [ex2]:expression
		| {assertion} tab* assert expression expression_list?
		| {func_call} tab* function_call
		/* Note that the Import Statement is NOT included in BNF */
		| {import_statement} tab* import_statement
		| {empty_line} tab*;

	operate_assign = {assign} assign
		| {sub_assign} sub_assign
		| {div_assign} div_assign;

	/* Expression */
		/* First the lowest priority (addition and subtraction) */
	expression = {res2} res2
		| {addition} expression op_add res2
		| {subtraction} expression op_sub res2;

		/* Then second lowest (multiplication, division and modulo) */
	res2 = {res3} res3
		| {multiplication} res2 op_mul res3
		| {division} res2 op_div res3
		| {modulo} res2 op_mod res3;

		/* Then the highest (exponentiation) */
	res3 = {other_expression} other_expression
		| {exponentiation} other_expression op_exp res3;

		/* Lastly, each of the above expressions can be one of the following */
	other_expression = {id_bracket} identifier l_br expression r_br
		| {func_call} function_call
		| {value} value
		| {id} identifier
		| {length_expr} length l_par expression r_par
		| {minimax} minimax l_par value value_list* r_par
		| {list_definition} l_br expression expression_list* r_br;

	minimax = {max} max | {min} min;
	value_list = {value_list} comma value;

	/* Import */
	import_statement = {import_module} import module import_as? module_list*
		| {from_module_import} from module import identifier import_as? identifier_list*;

	/* Module */
	module = {module} id_dot* identifier;
	import_as = {import_as} as identifier;
	module_list = {module_list} comma module import_as?;

	id_dot = {id_dot} identifier dot;
	identifier_list = {identifier_list} comma identifier import_as?;

	/* Comparison */
		/* First the lowest priority (and, or) */
	comparison = {negation} negation
		| {and_comparison} comparison logical_and negation
		| {or_comparison} comparison logical_or negation;

		/* Then the highest (not) */
	negation = {logical_value} logical_value
		| {negation} logical_not logical_value;

		/* Lastly, boolean literals and simple comparison expressions */
	logical_value = {true} true | {false} false
		| {exp_cmp_exp} [ex1]:expression single_comparison [ex2]:expression;

	single_comparison =
		  {gt} greater_than
		| {lt} less_than
		| {ge} great_eq
		| {le} less_eq
		| {ne} not_eq
		| {eq} eq;

	/* Function Call + Arglist */
	function_call = {func_call} identifier l_par arglist? r_par;
	arglist = {arg_list} expression expression_list*;

	/* Value */
	value = {id_func} identifier dot function_call
		| {number} number
		| {str_double} string_double_quotes
		| {str_single} string_single_quotes
		| {none} none;

	/* Number + Identifier */
	number = {num} num;
	identifier = {identifier} id;

	/* Leftover production that used at many places */
	expression_list = {expression_list} comma expression;
